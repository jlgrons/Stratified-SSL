basis_unlabeled,
X_labeled_val, X_unlabaled,
y_val, beta_ssl_tr,
gamma_tr, wg_val,
resamp_weight = NULL,
threshold)
mse_cv_ssl[i,j] <- acc_ssl_val$mse_ssl
ae_cv_ssl[i,j] <- acc_ssl_val$omr_ssl
# Naive supervised estimates.
acc_naive_val <- SupervisedApparentAccuracy(X_labeled_val, y_val,
beta_naive_tr,
rep(1, length(y_val)),
resamp_weight = NULL,
threshold = threshold)
mse_cv_naive[i,j] <- acc_naive_val$mse_sl
ae_cv_naive[i,j] <- acc_naive_val$omr_sl
# Need to add in the DR method.
#mse_cv_dr[i,j] = mean((y_val  - lp_val.dr)^2 * 1 / wg_val) / mean(1 / wg_val)
#ae_cv_dr[i,j] = mean(abs(y_val - lp_val.dr.ind) * 1 / wg_val) / mean(1 / wg_val)
}
}
return(list(mse_ssl = mean(mse_cv_ssl, na.rm = T),
ae_ssl = mean(ae_cv_ssl, na.rm = T),
mse_sl = mean(mse_cv_sl, na.rm = T),
ae_sl = mean(ae_cv_sl, na.rm = T),
mse_dr = mean(mse_cv_dr, na.rm = T),
ae_dr = mean(ae_cv_dr, na.rm = T),
mse_naive = mean(mse_cv_naive, na.rm = T),
ae_naive = mean(ae_cv_naive, na.rm = T)))
}
reps <- 1
# Note: Function still needs to be formatted.
acc_cv <- CrossValAccuracy(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y, samp_prob,
beta_minvar$min_var_weight[,1],
num_folds = num_folds, reps = reps,
theshold = my_threshold, lambda0 = NULL)
acc_cv
acc_sl
acc_ssl
ls(SemiSupervisedMinVarRegression)
beta_minvar
beta_ssl_se
num_perts <- 2
acc_pert <- AccuracyStdErrorEstimation(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, beta_minvar$min_var_weight[,1],
beta_sl, beta_ssl,
cv_residuals$resids_beta_sl,
cv_residuals$resids_beta_imp,
beta_ssl_se$inverse_information,
num_resamples = num_perts,
threshold = my_threshold)
# Updated: 2021-04-19
#' Component-wise minimum variance semi-supervised regression.
#'
#' @param basis_labeled Basis matrix for labeled data set.
#' @param bais_unlabeled Basis matrix for unlabeled data set.
#' @param X_labeled Covariate matrix for labeled data set.
#' @param X_unlabeled Covariate matrix for unlabeled data set.
#' @param y Numeric outcome vector.
#' @param samp_prob Numeric vector of weights.
#' @param min_var_weight Minimum variance weight for semi-supervised estimate.
#' @param beta_SL Supervised regression coefficient vector.
#' @param beta_SSL Semi-supervised regression coefficient vector.
#' @param resids_beta_SL Residuals from the supervised regression model.
#' @param resids_beta_SSL Residuals from the semi-supervised regression model.
#' @param resids_beta_imp Residuals from the imputation model.
#' @param inverse_information Inverse information  matric.
#' @param num_resamples Number of resamples.
#' @param threshold Threshold for over misclassification rate.
#' @export
#' @return Pertrubed estimates.
#'
AccuracyStdErrorEstimation <- function(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, min_var_weight,
beta_SL, beta_SSL, resids_beta_SL,
resids_beta_imp, inverse_information,
num_resamples = 500, threshold = 0.5){
n_labeled <- length(y)
resamp_weight <- sapply(num_resamples, function(kk) 4*rbeta(n_labeled, 0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations <- lapply(num_resamples, function(kk){model.eval.ap(Yt, beta.sl.p[,kk], beta_SSL_pert[,kk], beta_imp_pert[,kk],
beta.dr.p[,kk], Xt, Xv, basis.x, samp.prob, V = resamp_weight[,kk])})
ssl_pert_mse <- sapply(perturbations, "[[", 1);
ssl_pert_ae <- sapply(perturbations, "[[", 2);
sl_pert_mse <- sapply(perturbations, "[[", 3);
sl_pert_ae <- sapply(perturbations, "[[", 4);
return(list(ssl_pert_mse = ssl_pert_mse,
sl_pert_mse = sl_pert_mse,
ssl_pert_ae = ssl_pert_ae,
sl_pert_ae = sl_pert_ae,
beta_imp_pert = beta_imp_pert,
beta_SSL_pert = beta_SSL_pert,
beta_SL_pert= beta_SL_pert))
}
num_perts <- 2
acc_pert <- AccuracyStdErrorEstimation(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, beta_minvar$min_var_weight[,1],
beta_sl, beta_ssl,
cv_residuals$resids_beta_sl,
cv_residuals$resids_beta_imp,
beta_ssl_se$inverse_information,
num_resamples = num_perts,
threshold = my_threshold)
# Updated: 2021-04-19
#' Component-wise minimum variance semi-supervised regression.
#'
#' @param basis_labeled Basis matrix for labeled data set.
#' @param bais_unlabeled Basis matrix for unlabeled data set.
#' @param X_labeled Covariate matrix for labeled data set.
#' @param X_unlabeled Covariate matrix for unlabeled data set.
#' @param y Numeric outcome vector.
#' @param samp_prob Numeric vector of weights.
#' @param min_var_weight Minimum variance weight for semi-supervised estimate.
#' @param beta_SL Supervised regression coefficient vector.
#' @param beta_SSL Semi-supervised regression coefficient vector.
#' @param resids_beta_SL Residuals from the supervised regression model.
#' @param resids_beta_SSL Residuals from the semi-supervised regression model.
#' @param resids_beta_imp Residuals from the imputation model.
#' @param inverse_information Inverse information  matric.
#' @param num_resamples Number of resamples.
#' @param threshold Threshold for over misclassification rate.
#' @export
#' @return Pertrubed estimates.
#'
AccuracyStdErrorEstimation <- function(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, min_var_weight,
beta_SL, beta_SSL, resids_beta_SL,
resids_beta_imp, inverse_information,
num_resamples = 500, threshold = 0.5){
n_labeled <- length(y)
resamp_weight <- sapply(num_resamples, function(kk) 4*rbeta(n_labeled, 0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations <- lapply(num_resamples, function(kk){model.eval.ap(Yt, beta.sl.p[,kk], beta_SSL_pert[,kk], beta_imp_pert[,kk],
beta.dr.p[,kk], Xt, Xv, basis.x, samp.prob, V = resamp_weight[,kk])})
ssl_pert_mse <- sapply(perturbations, "[[", 1);
ssl_pert_ae <- sapply(perturbations, "[[", 2);
sl_pert_mse <- sapply(perturbations, "[[", 3);
sl_pert_ae <- sapply(perturbations, "[[", 4);
return(list(ssl_pert_mse = ssl_pert_mse,
sl_pert_mse = sl_pert_mse,
ssl_pert_ae = ssl_pert_ae,
sl_pert_ae = sl_pert_ae,
beta_imp_pert = beta_imp_pert,
beta_SSL_pert = beta_SSL_pert,
beta_SL_pert= beta_SL_pert))
}
num_perts <- 2
acc_pert <- AccuracyStdErrorEstimation(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, beta_minvar$min_var_weight[,1],
beta_sl, beta_ssl,
cv_residuals$resids_beta_sl,
cv_residuals$resids_beta_imp,
beta_ssl_se$inverse_information,
num_resamples = num_perts,
threshold = my_threshold)
n_labeled <- length(y)
resamp_weight <- sapply(num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
num_resamples = num_perts
n_labeled <- length(y)
resamp_weight <- sapply(num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
resids_beta_SL = cv_residuals$resids_beta_sl;
resids_beta_imp = cv_residuals$resids_beta_imp
n_labeled <- length(y)
resamp_weight <- sapply(num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
inverse_information =  beta_ssl_se$inverse_information
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_SSL <- beta_ssl
beta_SL <- beta_sl
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
min_var_weight <- beta_minvar$min_var_weight[,1]
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
resamp_weight
resamp_weight <- sapply(1:num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resamp_weight
n_labeled <- length(y)
resamp_weight <- sapply(1:num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations <- lapply(num_resamples, function(kk){model.eval.ap(Yt, beta.sl.p[,kk], beta_SSL_pert[,kk], beta_imp_pert[,kk],
beta.dr.p[,kk], Xt, Xv, basis.x, samp.prob, V = resamp_weight[,kk])})
beta_SSL_pert
n_labeled <- length(y)
resamp_weight <- sapply(1:num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations_sl <- lapply(num_resamples, function(kk){
SupervisedApparentAccuracy(X_labeled, y, beta_SL_pert[,kk], samp_prob,
resamp_weight = resamp_weight[ ,kk],
threshold = my_threshold)})
perturbations_sl
num_resamples
n_labeled <- length(y)
resamp_weight <- sapply(1:num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(1:num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations_sl <- lapply(1:num_resamples, function(kk){
SupervisedApparentAccuracy(X_labeled, y, beta_SL_pert[,kk], samp_prob,
resamp_weight = resamp_weight[ ,kk],
threshold = my_threshold)})
perturbations_ssl <- lapply(1:num_resamples, function(kk){
SemiSupervisedApparentAccuracy(basis_labeled, basis_unlabeled,
X_labeled, X_unlabaled,
y, beta_SSL_pert[,kk],  beta_imp_pert[, kk],
samp_prob,
resamp_weight = resamp_weight[ ,kk],
threshold = my_threshold)})
perturbations_sl
ssl_pert_mse <- sapply(perturbations_ssl, "[[", 1);
ssl_pert_ae <- sapply(perturbations_ssl, "[[", 2);
ssl_pert_mse
ssl_pert_ae
sl_pert_mse <- sapply(perturbations_sl, "[[", 1);
sl_pert_ae <- sapply(perturbations_sl, "[[", 2);
sl_pert_mse
sl_pert_ae
# Updated: 2021-04-19
#' Component-wise minimum variance semi-supervised regression.
#'
#' @param basis_labeled Basis matrix for labeled data set.
#' @param bais_unlabeled Basis matrix for unlabeled data set.
#' @param X_labeled Covariate matrix for labeled data set.
#' @param X_unlabeled Covariate matrix for unlabeled data set.
#' @param y Numeric outcome vector.
#' @param samp_prob Numeric vector of weights.
#' @param min_var_weight Minimum variance weight for semi-supervised estimate.
#' @param beta_SL Supervised regression coefficient vector.
#' @param beta_SSL Semi-supervised regression coefficient vector.
#' @param resids_beta_SL Residuals from the supervised regression model.
#' @param resids_beta_SSL Residuals from the semi-supervised regression model.
#' @param resids_beta_imp Residuals from the imputation model.
#' @param inverse_information Inverse information  matric.
#' @param num_resamples Number of resamples.
#' @param threshold Threshold for over misclassification rate.
#' @export
#' @return Pertrubed estimates.
#'
AccuracyStdErrorEstimation <- function(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, min_var_weight,
beta_SL, beta_SSL, resids_beta_SL,
resids_beta_imp, inverse_information,
num_resamples = 500, threshold = 0.5){
n_labeled <- length(y)
resamp_weight <- sapply(1:num_resamples, function(kk) 4*rbeta(n_labeled,
0.5, 1.5))
resids_beta_SL_weighted <- ((resamp_weight - 1) * resids_beta_SL)
resids_beta_imp_weighted <- ((resamp_weight - 1) * resids_beta_imp)
# Note: double check correctness of this.
X_labeled_intercept <- cbind(1, X_labeled)
IF_beta_imp <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_imp_weighted / n_labeled
IF_beta_SL <- inverse_information %*% t(
X_labeled_intercept) %*% resids_beta_SL_weighted / n_labeled
beta_SSL_pert <- beta_SSL + diag(min_var_weight) %*% IF_beta_SL + diag(
1-min_var_weight) %*% IF_beta_imp
beta_SL_pert <- beta_SL + IF_beta_imp
beta_imp_pert <- sapply(1:num_resamples, function(kk){
RidgeRegression(basis_labeled, y,
weights = resamp_weight[,kk] / samp_prob/mean(
resamp_weight[,kk] / samp_prob),
lambda = log(ncol(basis_labeled)) / (n_labeled^1.5))
})
perturbations_sl <- lapply(1:num_resamples, function(kk){
SupervisedApparentAccuracy(X_labeled, y, beta_SL_pert[,kk], samp_prob,
resamp_weight = resamp_weight[ ,kk],
threshold = my_threshold)})
perturbations_ssl <- lapply(1:num_resamples, function(kk){
SemiSupervisedApparentAccuracy(basis_labeled, basis_unlabeled,
X_labeled, X_unlabaled,
y, beta_SSL_pert[,kk],  beta_imp_pert[, kk],
samp_prob,
resamp_weight = resamp_weight[ ,kk],
threshold = my_threshold)})
ssl_pert_mse <- sapply(perturbations_ssl, "[[", 1);
ssl_pert_ae <- sapply(perturbations_ssl, "[[", 2);
sl_pert_mse <- sapply(perturbations_sl, "[[", 1);
sl_pert_ae <- sapply(perturbations_sl, "[[", 2);
return(list(ssl_pert_mse = ssl_pert_mse,
sl_pert_mse = sl_pert_mse,
ssl_pert_ae = ssl_pert_ae,
sl_pert_ae = sl_pert_ae,
beta_imp_pert = beta_imp_pert,
beta_SSL_pert = beta_SSL_pert,
beta_SL_pert= beta_SL_pert))
}
num_perts <- 2
acc_pert <- AccuracyStdErrorEstimation(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y,
samp_prob, beta_minvar$min_var_weight[,1],
beta_sl, beta_ssl,
cv_residuals$resids_beta_sl,
cv_residuals$resids_beta_imp,
beta_ssl_se$inverse_information,
num_resamples = num_perts,
threshold = my_threshold)
################################################################################
# Simulation setting test
library('stratifiedSSL')
set.seed(92047)
n_lab <- 400
n_unlab <- 20000
p <- 10
rho <- 0.4
num_strata <- 2
################################################################################
# Generate data.
new_data <- DataGeneration(n_lab, n_unlab, p, rho, signal = c(1, 1, 0.5, 0.5),
model_specification = 'outcome_incorrect_imputation_correct',
num_strata = num_strata)
# Format data.
X_labeled <- new_data$covariates_lab
X_unlabeled <- new_data$covariates_unlab
S_unlabeled <- new_data$S_unlab
S_labeled <- new_data$S_lab
y <- new_data$Y_lab
samp_prob <- new_data$samp_prob
################################################################################
# Get basis expansion.
my_basis <- NaturalSplineBasis(rbind(X_labeled, X_unlabeled),
c(S_labeled, S_unlabeled),
num_knots = 3)
basis_labeled <- my_basis[1:n_lab, ]
basis_unlabeled <- my_basis[(n_lab+1):nrow(my_basis), ]
################################################################################
# Fit the regression model.
regression_result <- SemiSupervisedRegression(basis_labeled,
basis_unlabeled,
X_labeled,
X_unlabeled,
y,
samp_prob,
lambda = NULL)
# Supervised beta.
beta_sl <- regression_result$beta_SL
# Semi-supervised beta.
beta_ssl <- regression_result$beta_SSL
# Naive beta with no sampling probability.
beta_naive <- regression_result$beta_SL_unweighted
# Beta from imputation.
beta_imp <- regression_result$beta_imp
# Cross-validated residuals.
num_folds <- 3
cv_residuals <- CrossValResids(basis_labeled, basis_unlabeled, X_labeled,
X_unlabeled, y, samp_prob, num_folds)
# Standard error estimates for supervised and SS estimates.
beta_sl_se <- StdErrorEstimation(X_labeled, X_unlabeled, y,
beta_sl, cv_residuals$beta_sl_cv)
beta_ssl_se <- StdErrorEstimation(X_labeled, X_unlabeled, y,
beta_ssl, cv_residuals$beta_ssl_cv)
# Minimum Variance Estimator (here the component-wise optimal estimator).
my_epsilon <- (n_labeled*(beta_sl_se$std_error^2 +
beta_ssl_se$std_error^2))/(2*n_labeled^0.6)
beta_minvar <- SemiSupervisedMinVarRegression(beta_ssl, beta_sl,
beta_ssl_se$std_error,
beta_sl_se$std_error,
cv_residuals$resids_beta_imp,
cv_residuals$resids_beta_sl,
X_labeled,
X_unlabeled, epsilon = my_epsilon)
beta_minvar <- SemiSupervisedMinVarRegression(beta_ssl, beta_sl,
beta_ssl_se$std_error,
beta_sl_se$std_error,
cv_residuals$resids_beta_imp,
cv_residuals$resids_beta_sl,
X_labeled,
X_unlabeled, epsilon = NULL)
# Apparent accuracy estimates.
my_threshold <- 0.5
acc_sl <- SupervisedApparentAccuracy(X_labeled, y, beta_sl, samp_prob,
resamp_weight = NULL,
threshold = my_threshold)
acc_ssl <- SemiSupervisedApparentAccuracy(basis_labeled, basis_unlabeled,
X_labeled, X_unlabaled,
y, beta_ssl, beta_imp, samp_prob,
resamp_weight = NULL,
threshold = my_threshold)
# Cross-validated accuracy estimates.
reps <- 1
# Note: Function still needs to be formatted.
acc_cv <- CrossValAccuracy(basis_labeled, basis_unlabeled,
X_labeled, X_unlabeled, y, samp_prob,
beta_minvar$min_var_weight[,1],
num_folds = num_folds, reps = reps,
theshold = my_threshold, lambda0 = NULL)
build()
install()
library('stratifiedSSL')
CrossVal
build()
install()
library('stratifiedSSL')
